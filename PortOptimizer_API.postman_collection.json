{
	"info": {
		"name": "PortOptimizer Screenshot API",
		"description": "API endpoints for PortOptimizer screenshot automation with public download links",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:5000",
			"type": "string"
		},
		{
			"key": "admin_password",
			"value": "YB02Ss3JJdk",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "API Info",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/",
					"host": ["{{base_url}}"],
					"path": [""]
				},
				"description": "Get API information and available endpoints"
			},
			"response": []
		},
		{
			"name": "System Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"    pm.expect(jsonData.success).to.be.true;",
							"});",
							"",
							"pm.test(\"Response has frequency_hours\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('frequency_hours');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/status",
					"host": ["{{base_url}}"],
					"path": ["status"]
				},
				"description": "Get current system status and configuration"
			},
			"response": []
		},
		{
			"name": "Take Screenshot Now",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"});",
							"",
							"pm.test(\"Response has filename\", function () {",
							"    var jsonData = pm.response.json();",
							"    if (jsonData.success) {",
							"        pm.expect(jsonData).to.have.property('filename');",
							"        pm.environment.set(\"last_screenshot\", jsonData.filename);",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"admin_password\": \"{{admin_password}}\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/screenshot/now",
					"host": ["{{base_url}}"],
					"path": ["screenshot", "now"]
				},
				"description": "Trigger an immediate screenshot (takes ~2-3 minutes)"
			},
			"response": []
		},
		{
			"name": "Get Screenshot by Date",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 404\", function () {",
							"    pm.expect([200, 404]).to.include(pm.response.code);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Response has download_url\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property('download_url');",
							"        pm.expect(jsonData.download_url).to.include('/download/');",
							"        pm.environment.set(\"download_url\", jsonData.download_url);",
							"    });",
							"    ",
							"    pm.test(\"Response has filename\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property('filename');",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/screenshot/{{current_date}}",
					"host": ["{{base_url}}"],
					"path": ["screenshot", "{{current_date}}"]
				},
				"description": "Get screenshot metadata and download link for a specific date (YYYY-MM-DD)"
			},
			"response": []
		},
		{
			"name": "Download File",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is PNG image\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('image/png');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/download/{{last_screenshot}}",
					"host": ["{{base_url}}"],
					"path": ["download", "{{last_screenshot}}"]
				},
				"description": "Download a specific screenshot file (use filename from previous responses)"
			},
			"response": []
		},
		{
			"name": "Get Screenshots Range (Date Range)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 404\", function () {",
							"    pm.expect([200, 404]).to.include(pm.response.code);",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Response has download_url for ZIP\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property('download_url');",
							"        pm.expect(jsonData.download_url).to.include('/download/');",
							"        pm.expect(jsonData.download_url).to.include('.zip');",
							"    });",
							"    ",
							"    pm.test(\"Response has screenshot_count\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property('screenshot_count');",
							"        pm.expect(jsonData.screenshot_count).to.be.a('number');",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/screenshots/range?start_date=2024-10-20&end_date=2024-10-25",
					"host": ["{{base_url}}"],
					"path": ["screenshots", "range"],
					"query": [
						{
							"key": "start_date",
							"value": "2024-10-20"
						},
						{
							"key": "end_date",
							"value": "2024-10-25"
						}
					]
				},
				"description": "Get screenshots between two dates as ZIP with download link"
			},
			"response": []
		},
		{
			"name": "Get Screenshots Range (Last N)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 404\", function () {",
							"    pm.expect([200, 404]).to.include(pm.response.code);",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Response has download_url for ZIP\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property('download_url');",
							"        pm.expect(jsonData.zip_filename).to.include('.zip');",
							"        pm.environment.set(\"zip_download_url\", jsonData.download_url);",
							"    });",
							"    ",
							"    pm.test(\"Response has screenshots array\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property('screenshots');",
							"        pm.expect(jsonData.screenshots).to.be.an('array');",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/screenshots/range?last_n=5",
					"host": ["{{base_url}}"],
					"path": ["screenshots", "range"],
					"query": [
						{
							"key": "last_n",
							"value": "5"
						}
					]
				},
				"description": "Get last N screenshots as ZIP with download link"
			},
			"response": []
		},
		{
			"name": "Change Frequency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"    pm.expect(jsonData.success).to.be.true;",
							"});",
							"",
							"pm.test(\"Frequency updated\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('frequency_hours');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"admin_password\": \"{{admin_password}}\",\n    \"frequency_hours\": 12\n}"
				},
				"url": {
					"raw": "{{base_url}}/admin/frequency",
					"host": ["{{base_url}}"],
					"path": ["admin", "frequency"]
				},
				"description": "Change screenshot frequency (in hours)"
			},
			"response": []
		},
		{
			"name": "Update Login Credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"    pm.expect(jsonData.success).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"admin_password\": \"{{admin_password}}\",\n    \"username\": \"sara@fouroneone.io\",\n    \"password\": \"Ss925201!\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/admin/credentials",
					"host": ["{{base_url}}"],
					"path": ["admin", "credentials"]
				},
				"description": "Update portal login credentials"
			},
			"response": []
		},
		{
			"name": "Cleanup Screenshots",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"    pm.expect(jsonData.success).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"admin_password\": \"{{admin_password}}\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/admin/cleanup",
					"host": ["{{base_url}}"],
					"path": ["admin", "cleanup"]
				},
				"description": "Delete all screenshots (USE WITH CAUTION)"
			},
			"response": []
		}
	]
}
